// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MinWithdrawalDelayBlocksSet extends ethereum.Event {
  get params(): MinWithdrawalDelayBlocksSet__Params {
    return new MinWithdrawalDelayBlocksSet__Params(this);
  }
}

export class MinWithdrawalDelayBlocksSet__Params {
  _event: MinWithdrawalDelayBlocksSet;

  constructor(event: MinWithdrawalDelayBlocksSet) {
    this._event = event;
  }

  get previousValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OperatorDetailsModified extends ethereum.Event {
  get params(): OperatorDetailsModified__Params {
    return new OperatorDetailsModified__Params(this);
  }
}

export class OperatorDetailsModified__Params {
  _event: OperatorDetailsModified;

  constructor(event: OperatorDetailsModified) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOperatorDetails(): OperatorDetailsModifiedNewOperatorDetailsStruct {
    return changetype<OperatorDetailsModifiedNewOperatorDetailsStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }
}

export class OperatorDetailsModifiedNewOperatorDetailsStruct extends ethereum.Tuple {
  get earningsReceiver(): Address {
    return this[0].toAddress();
  }

  get delegationApprover(): Address {
    return this[1].toAddress();
  }

  get stakerOptOutWindowBlocks(): BigInt {
    return this[2].toBigInt();
  }
}

export class OperatorMetadataURIUpdated extends ethereum.Event {
  get params(): OperatorMetadataURIUpdated__Params {
    return new OperatorMetadataURIUpdated__Params(this);
  }
}

export class OperatorMetadataURIUpdated__Params {
  _event: OperatorMetadataURIUpdated;

  constructor(event: OperatorMetadataURIUpdated) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get metadataURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class OperatorRegistered extends ethereum.Event {
  get params(): OperatorRegistered__Params {
    return new OperatorRegistered__Params(this);
  }
}

export class OperatorRegistered__Params {
  _event: OperatorRegistered;

  constructor(event: OperatorRegistered) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operatorDetails(): OperatorRegisteredOperatorDetailsStruct {
    return changetype<OperatorRegisteredOperatorDetailsStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }
}

export class OperatorRegisteredOperatorDetailsStruct extends ethereum.Tuple {
  get earningsReceiver(): Address {
    return this[0].toAddress();
  }

  get delegationApprover(): Address {
    return this[1].toAddress();
  }

  get stakerOptOutWindowBlocks(): BigInt {
    return this[2].toBigInt();
  }
}

export class OperatorSharesDecreased extends ethereum.Event {
  get params(): OperatorSharesDecreased__Params {
    return new OperatorSharesDecreased__Params(this);
  }
}

export class OperatorSharesDecreased__Params {
  _event: OperatorSharesDecreased;

  constructor(event: OperatorSharesDecreased) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OperatorSharesIncreased extends ethereum.Event {
  get params(): OperatorSharesIncreased__Params {
    return new OperatorSharesIncreased__Params(this);
  }
}

export class OperatorSharesIncreased__Params {
  _event: OperatorSharesIncreased;

  constructor(event: OperatorSharesIncreased) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPausedStatus(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PauserRegistrySet extends ethereum.Event {
  get params(): PauserRegistrySet__Params {
    return new PauserRegistrySet__Params(this);
  }
}

export class PauserRegistrySet__Params {
  _event: PauserRegistrySet;

  constructor(event: PauserRegistrySet) {
    this._event = event;
  }

  get pauserRegistry(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPauserRegistry(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakerDelegated extends ethereum.Event {
  get params(): StakerDelegated__Params {
    return new StakerDelegated__Params(this);
  }
}

export class StakerDelegated__Params {
  _event: StakerDelegated;

  constructor(event: StakerDelegated) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakerForceUndelegated extends ethereum.Event {
  get params(): StakerForceUndelegated__Params {
    return new StakerForceUndelegated__Params(this);
  }
}

export class StakerForceUndelegated__Params {
  _event: StakerForceUndelegated;

  constructor(event: StakerForceUndelegated) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakerUndelegated extends ethereum.Event {
  get params(): StakerUndelegated__Params {
    return new StakerUndelegated__Params(this);
  }
}

export class StakerUndelegated__Params {
  _event: StakerUndelegated;

  constructor(event: StakerUndelegated) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StrategyWithdrawalDelayBlocksSet extends ethereum.Event {
  get params(): StrategyWithdrawalDelayBlocksSet__Params {
    return new StrategyWithdrawalDelayBlocksSet__Params(this);
  }
}

export class StrategyWithdrawalDelayBlocksSet__Params {
  _event: StrategyWithdrawalDelayBlocksSet;

  constructor(event: StrategyWithdrawalDelayBlocksSet) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPausedStatus(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawalCompleted extends ethereum.Event {
  get params(): WithdrawalCompleted__Params {
    return new WithdrawalCompleted__Params(this);
  }
}

export class WithdrawalCompleted__Params {
  _event: WithdrawalCompleted;

  constructor(event: WithdrawalCompleted) {
    this._event = event;
  }

  get withdrawalRoot(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class WithdrawalMigrated extends ethereum.Event {
  get params(): WithdrawalMigrated__Params {
    return new WithdrawalMigrated__Params(this);
  }
}

export class WithdrawalMigrated__Params {
  _event: WithdrawalMigrated;

  constructor(event: WithdrawalMigrated) {
    this._event = event;
  }

  get oldWithdrawalRoot(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newWithdrawalRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class WithdrawalQueued extends ethereum.Event {
  get params(): WithdrawalQueued__Params {
    return new WithdrawalQueued__Params(this);
  }
}

export class WithdrawalQueued__Params {
  _event: WithdrawalQueued;

  constructor(event: WithdrawalQueued) {
    this._event = event;
  }

  get withdrawalRoot(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get withdrawal(): WithdrawalQueuedWithdrawalStruct {
    return changetype<WithdrawalQueuedWithdrawalStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }
}

export class WithdrawalQueuedWithdrawalStruct extends ethereum.Tuple {
  get staker(): Address {
    return this[0].toAddress();
  }

  get delegatedTo(): Address {
    return this[1].toAddress();
  }

  get withdrawer(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get startBlock(): BigInt {
    return this[4].toBigInt();
  }

  get strategies(): Array<Address> {
    return this[5].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[6].toBigIntArray();
  }
}

export class DelegationManager__calculateWithdrawalRootInputWithdrawalStruct extends ethereum.Tuple {
  get staker(): Address {
    return this[0].toAddress();
  }

  get delegatedTo(): Address {
    return this[1].toAddress();
  }

  get withdrawer(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get startBlock(): BigInt {
    return this[4].toBigInt();
  }

  get strategies(): Array<Address> {
    return this[5].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[6].toBigIntArray();
  }
}

export class DelegationManager__getDelegatableSharesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class DelegationManager__operatorDetailsResultValue0Struct extends ethereum.Tuple {
  get earningsReceiver(): Address {
    return this[0].toAddress();
  }

  get delegationApprover(): Address {
    return this[1].toAddress();
  }

  get stakerOptOutWindowBlocks(): BigInt {
    return this[2].toBigInt();
  }
}

export class DelegationManager__queueWithdrawalsInputQueuedWithdrawalParamsStruct extends ethereum.Tuple {
  get strategies(): Array<Address> {
    return this[0].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get withdrawer(): Address {
    return this[2].toAddress();
  }
}

export class DelegationManager extends ethereum.SmartContract {
  static bind(address: Address): DelegationManager {
    return new DelegationManager("DelegationManager", address);
  }

  DELEGATION_APPROVAL_TYPEHASH(): Bytes {
    let result = super.call(
      "DELEGATION_APPROVAL_TYPEHASH",
      "DELEGATION_APPROVAL_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DELEGATION_APPROVAL_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DELEGATION_APPROVAL_TYPEHASH",
      "DELEGATION_APPROVAL_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_STAKER_OPT_OUT_WINDOW_BLOCKS(): BigInt {
    let result = super.call(
      "MAX_STAKER_OPT_OUT_WINDOW_BLOCKS",
      "MAX_STAKER_OPT_OUT_WINDOW_BLOCKS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_STAKER_OPT_OUT_WINDOW_BLOCKS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_STAKER_OPT_OUT_WINDOW_BLOCKS",
      "MAX_STAKER_OPT_OUT_WINDOW_BLOCKS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_WITHDRAWAL_DELAY_BLOCKS(): BigInt {
    let result = super.call(
      "MAX_WITHDRAWAL_DELAY_BLOCKS",
      "MAX_WITHDRAWAL_DELAY_BLOCKS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_WITHDRAWAL_DELAY_BLOCKS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_WITHDRAWAL_DELAY_BLOCKS",
      "MAX_WITHDRAWAL_DELAY_BLOCKS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  STAKER_DELEGATION_TYPEHASH(): Bytes {
    let result = super.call(
      "STAKER_DELEGATION_TYPEHASH",
      "STAKER_DELEGATION_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_STAKER_DELEGATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "STAKER_DELEGATION_TYPEHASH",
      "STAKER_DELEGATION_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beaconChainETHStrategy(): Address {
    let result = super.call(
      "beaconChainETHStrategy",
      "beaconChainETHStrategy():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_beaconChainETHStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "beaconChainETHStrategy",
      "beaconChainETHStrategy():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateCurrentStakerDelegationDigestHash(
    staker: Address,
    operator: Address,
    expiry: BigInt,
  ): Bytes {
    let result = super.call(
      "calculateCurrentStakerDelegationDigestHash",
      "calculateCurrentStakerDelegationDigestHash(address,address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );

    return result[0].toBytes();
  }

  try_calculateCurrentStakerDelegationDigestHash(
    staker: Address,
    operator: Address,
    expiry: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "calculateCurrentStakerDelegationDigestHash",
      "calculateCurrentStakerDelegationDigestHash(address,address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  calculateDelegationApprovalDigestHash(
    staker: Address,
    operator: Address,
    _delegationApprover: Address,
    approverSalt: Bytes,
    expiry: BigInt,
  ): Bytes {
    let result = super.call(
      "calculateDelegationApprovalDigestHash",
      "calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(_delegationApprover),
        ethereum.Value.fromFixedBytes(approverSalt),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );

    return result[0].toBytes();
  }

  try_calculateDelegationApprovalDigestHash(
    staker: Address,
    operator: Address,
    _delegationApprover: Address,
    approverSalt: Bytes,
    expiry: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "calculateDelegationApprovalDigestHash",
      "calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(_delegationApprover),
        ethereum.Value.fromFixedBytes(approverSalt),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  calculateStakerDelegationDigestHash(
    staker: Address,
    _stakerNonce: BigInt,
    operator: Address,
    expiry: BigInt,
  ): Bytes {
    let result = super.call(
      "calculateStakerDelegationDigestHash",
      "calculateStakerDelegationDigestHash(address,uint256,address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromUnsignedBigInt(_stakerNonce),
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );

    return result[0].toBytes();
  }

  try_calculateStakerDelegationDigestHash(
    staker: Address,
    _stakerNonce: BigInt,
    operator: Address,
    expiry: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "calculateStakerDelegationDigestHash",
      "calculateStakerDelegationDigestHash(address,uint256,address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromUnsignedBigInt(_stakerNonce),
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  calculateWithdrawalRoot(
    withdrawal: DelegationManager__calculateWithdrawalRootInputWithdrawalStruct,
  ): Bytes {
    let result = super.call(
      "calculateWithdrawalRoot",
      "calculateWithdrawalRoot((address,address,address,uint256,uint32,address[],uint256[])):(bytes32)",
      [ethereum.Value.fromTuple(withdrawal)],
    );

    return result[0].toBytes();
  }

  try_calculateWithdrawalRoot(
    withdrawal: DelegationManager__calculateWithdrawalRootInputWithdrawalStruct,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "calculateWithdrawalRoot",
      "calculateWithdrawalRoot((address,address,address,uint256,uint32,address[],uint256[])):(bytes32)",
      [ethereum.Value.fromTuple(withdrawal)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  cumulativeWithdrawalsQueued(param0: Address): BigInt {
    let result = super.call(
      "cumulativeWithdrawalsQueued",
      "cumulativeWithdrawalsQueued(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_cumulativeWithdrawalsQueued(
    param0: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeWithdrawalsQueued",
      "cumulativeWithdrawalsQueued(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegatedTo(param0: Address): Address {
    let result = super.call("delegatedTo", "delegatedTo(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_delegatedTo(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "delegatedTo",
      "delegatedTo(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  delegationApprover(operator: Address): Address {
    let result = super.call(
      "delegationApprover",
      "delegationApprover(address):(address)",
      [ethereum.Value.fromAddress(operator)],
    );

    return result[0].toAddress();
  }

  try_delegationApprover(operator: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "delegationApprover",
      "delegationApprover(address):(address)",
      [ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  delegationApproverSaltIsSpent(param0: Address, param1: Bytes): boolean {
    let result = super.call(
      "delegationApproverSaltIsSpent",
      "delegationApproverSaltIsSpent(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1),
      ],
    );

    return result[0].toBoolean();
  }

  try_delegationApproverSaltIsSpent(
    param0: Address,
    param1: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "delegationApproverSaltIsSpent",
      "delegationApproverSaltIsSpent(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  domainSeparator(): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_domainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  earningsReceiver(operator: Address): Address {
    let result = super.call(
      "earningsReceiver",
      "earningsReceiver(address):(address)",
      [ethereum.Value.fromAddress(operator)],
    );

    return result[0].toAddress();
  }

  try_earningsReceiver(operator: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "earningsReceiver",
      "earningsReceiver(address):(address)",
      [ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  eigenPodManager(): Address {
    let result = super.call(
      "eigenPodManager",
      "eigenPodManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_eigenPodManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "eigenPodManager",
      "eigenPodManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDelegatableShares(
    staker: Address,
  ): DelegationManager__getDelegatableSharesResult {
    let result = super.call(
      "getDelegatableShares",
      "getDelegatableShares(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(staker)],
    );

    return new DelegationManager__getDelegatableSharesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
    );
  }

  try_getDelegatableShares(
    staker: Address,
  ): ethereum.CallResult<DelegationManager__getDelegatableSharesResult> {
    let result = super.tryCall(
      "getDelegatableShares",
      "getDelegatableShares(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(staker)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DelegationManager__getDelegatableSharesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
      ),
    );
  }

  getOperatorShares(
    operator: Address,
    strategies: Array<Address>,
  ): Array<BigInt> {
    let result = super.call(
      "getOperatorShares",
      "getOperatorShares(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddressArray(strategies),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getOperatorShares(
    operator: Address,
    strategies: Array<Address>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getOperatorShares",
      "getOperatorShares(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddressArray(strategies),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getWithdrawalDelay(strategies: Array<Address>): BigInt {
    let result = super.call(
      "getWithdrawalDelay",
      "getWithdrawalDelay(address[]):(uint256)",
      [ethereum.Value.fromAddressArray(strategies)],
    );

    return result[0].toBigInt();
  }

  try_getWithdrawalDelay(
    strategies: Array<Address>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawalDelay",
      "getWithdrawalDelay(address[]):(uint256)",
      [ethereum.Value.fromAddressArray(strategies)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isDelegated(staker: Address): boolean {
    let result = super.call("isDelegated", "isDelegated(address):(bool)", [
      ethereum.Value.fromAddress(staker),
    ]);

    return result[0].toBoolean();
  }

  try_isDelegated(staker: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isDelegated", "isDelegated(address):(bool)", [
      ethereum.Value.fromAddress(staker),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperator(operator: Address): boolean {
    let result = super.call("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(operator),
    ]);

    return result[0].toBoolean();
  }

  try_isOperator(operator: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(operator),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minWithdrawalDelayBlocks(): BigInt {
    let result = super.call(
      "minWithdrawalDelayBlocks",
      "minWithdrawalDelayBlocks():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minWithdrawalDelayBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minWithdrawalDelayBlocks",
      "minWithdrawalDelayBlocks():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operatorDetails(
    operator: Address,
  ): DelegationManager__operatorDetailsResultValue0Struct {
    let result = super.call(
      "operatorDetails",
      "operatorDetails(address):((address,address,uint32))",
      [ethereum.Value.fromAddress(operator)],
    );

    return changetype<DelegationManager__operatorDetailsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_operatorDetails(
    operator: Address,
  ): ethereum.CallResult<DelegationManager__operatorDetailsResultValue0Struct> {
    let result = super.tryCall(
      "operatorDetails",
      "operatorDetails(address):((address,address,uint32))",
      [ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DelegationManager__operatorDetailsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  operatorShares(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "operatorShares",
      "operatorShares(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_operatorShares(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "operatorShares",
      "operatorShares(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(index: i32): boolean {
    let result = super.call("paused", "paused(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(index)),
    ]);

    return result[0].toBoolean();
  }

  try_paused(index: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(index)),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused1(): BigInt {
    let result = super.call("paused", "paused():(uint256)", []);

    return result[0].toBigInt();
  }

  try_paused1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("paused", "paused():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pauserRegistry(): Address {
    let result = super.call("pauserRegistry", "pauserRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_pauserRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pauserRegistry",
      "pauserRegistry():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingWithdrawals(param0: Bytes): boolean {
    let result = super.call(
      "pendingWithdrawals",
      "pendingWithdrawals(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBoolean();
  }

  try_pendingWithdrawals(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "pendingWithdrawals",
      "pendingWithdrawals(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  queueWithdrawals(
    queuedWithdrawalParams: Array<DelegationManager__queueWithdrawalsInputQueuedWithdrawalParamsStruct>,
  ): Array<Bytes> {
    let result = super.call(
      "queueWithdrawals",
      "queueWithdrawals((address[],uint256[],address)[]):(bytes32[])",
      [ethereum.Value.fromTupleArray(queuedWithdrawalParams)],
    );

    return result[0].toBytesArray();
  }

  try_queueWithdrawals(
    queuedWithdrawalParams: Array<DelegationManager__queueWithdrawalsInputQueuedWithdrawalParamsStruct>,
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "queueWithdrawals",
      "queueWithdrawals((address[],uint256[],address)[]):(bytes32[])",
      [ethereum.Value.fromTupleArray(queuedWithdrawalParams)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  slasher(): Address {
    let result = super.call("slasher", "slasher():(address)", []);

    return result[0].toAddress();
  }

  try_slasher(): ethereum.CallResult<Address> {
    let result = super.tryCall("slasher", "slasher():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakerNonce(param0: Address): BigInt {
    let result = super.call("stakerNonce", "stakerNonce(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_stakerNonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakerNonce",
      "stakerNonce(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakerOptOutWindowBlocks(operator: Address): BigInt {
    let result = super.call(
      "stakerOptOutWindowBlocks",
      "stakerOptOutWindowBlocks(address):(uint256)",
      [ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBigInt();
  }

  try_stakerOptOutWindowBlocks(operator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakerOptOutWindowBlocks",
      "stakerOptOutWindowBlocks(address):(uint256)",
      [ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  strategyManager(): Address {
    let result = super.call(
      "strategyManager",
      "strategyManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_strategyManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "strategyManager",
      "strategyManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strategyWithdrawalDelayBlocks(param0: Address): BigInt {
    let result = super.call(
      "strategyWithdrawalDelayBlocks",
      "strategyWithdrawalDelayBlocks(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_strategyWithdrawalDelayBlocks(
    param0: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "strategyWithdrawalDelayBlocks",
      "strategyWithdrawalDelayBlocks(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  undelegate(staker: Address): Array<Bytes> {
    let result = super.call("undelegate", "undelegate(address):(bytes32[])", [
      ethereum.Value.fromAddress(staker),
    ]);

    return result[0].toBytesArray();
  }

  try_undelegate(staker: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "undelegate",
      "undelegate(address):(bytes32[])",
      [ethereum.Value.fromAddress(staker)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _strategyManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _slasher(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _eigenPodManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CompleteQueuedWithdrawalCall extends ethereum.Call {
  get inputs(): CompleteQueuedWithdrawalCall__Inputs {
    return new CompleteQueuedWithdrawalCall__Inputs(this);
  }

  get outputs(): CompleteQueuedWithdrawalCall__Outputs {
    return new CompleteQueuedWithdrawalCall__Outputs(this);
  }
}

export class CompleteQueuedWithdrawalCall__Inputs {
  _call: CompleteQueuedWithdrawalCall;

  constructor(call: CompleteQueuedWithdrawalCall) {
    this._call = call;
  }

  get withdrawal(): CompleteQueuedWithdrawalCallWithdrawalStruct {
    return changetype<CompleteQueuedWithdrawalCallWithdrawalStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get middlewareTimesIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get receiveAsTokens(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class CompleteQueuedWithdrawalCall__Outputs {
  _call: CompleteQueuedWithdrawalCall;

  constructor(call: CompleteQueuedWithdrawalCall) {
    this._call = call;
  }
}

export class CompleteQueuedWithdrawalCallWithdrawalStruct extends ethereum.Tuple {
  get staker(): Address {
    return this[0].toAddress();
  }

  get delegatedTo(): Address {
    return this[1].toAddress();
  }

  get withdrawer(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get startBlock(): BigInt {
    return this[4].toBigInt();
  }

  get strategies(): Array<Address> {
    return this[5].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[6].toBigIntArray();
  }
}

export class CompleteQueuedWithdrawalsCall extends ethereum.Call {
  get inputs(): CompleteQueuedWithdrawalsCall__Inputs {
    return new CompleteQueuedWithdrawalsCall__Inputs(this);
  }

  get outputs(): CompleteQueuedWithdrawalsCall__Outputs {
    return new CompleteQueuedWithdrawalsCall__Outputs(this);
  }
}

export class CompleteQueuedWithdrawalsCall__Inputs {
  _call: CompleteQueuedWithdrawalsCall;

  constructor(call: CompleteQueuedWithdrawalsCall) {
    this._call = call;
  }

  get withdrawals(): Array<CompleteQueuedWithdrawalsCallWithdrawalsStruct> {
    return this._call.inputValues[0].value.toTupleArray<CompleteQueuedWithdrawalsCallWithdrawalsStruct>();
  }

  get tokens(): Array<Array<Address>> {
    return this._call.inputValues[1].value.toAddressMatrix();
  }

  get middlewareTimesIndexes(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get receiveAsTokens(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }
}

export class CompleteQueuedWithdrawalsCall__Outputs {
  _call: CompleteQueuedWithdrawalsCall;

  constructor(call: CompleteQueuedWithdrawalsCall) {
    this._call = call;
  }
}

export class CompleteQueuedWithdrawalsCallWithdrawalsStruct extends ethereum.Tuple {
  get staker(): Address {
    return this[0].toAddress();
  }

  get delegatedTo(): Address {
    return this[1].toAddress();
  }

  get withdrawer(): Address {
    return this[2].toAddress();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get startBlock(): BigInt {
    return this[4].toBigInt();
  }

  get strategies(): Array<Address> {
    return this[5].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[6].toBigIntArray();
  }
}

export class DecreaseDelegatedSharesCall extends ethereum.Call {
  get inputs(): DecreaseDelegatedSharesCall__Inputs {
    return new DecreaseDelegatedSharesCall__Inputs(this);
  }

  get outputs(): DecreaseDelegatedSharesCall__Outputs {
    return new DecreaseDelegatedSharesCall__Outputs(this);
  }
}

export class DecreaseDelegatedSharesCall__Inputs {
  _call: DecreaseDelegatedSharesCall;

  constructor(call: DecreaseDelegatedSharesCall) {
    this._call = call;
  }

  get staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get strategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get shares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DecreaseDelegatedSharesCall__Outputs {
  _call: DecreaseDelegatedSharesCall;

  constructor(call: DecreaseDelegatedSharesCall) {
    this._call = call;
  }
}

export class DelegateToCall extends ethereum.Call {
  get inputs(): DelegateToCall__Inputs {
    return new DelegateToCall__Inputs(this);
  }

  get outputs(): DelegateToCall__Outputs {
    return new DelegateToCall__Outputs(this);
  }
}

export class DelegateToCall__Inputs {
  _call: DelegateToCall;

  constructor(call: DelegateToCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approverSignatureAndExpiry(): DelegateToCallApproverSignatureAndExpiryStruct {
    return changetype<DelegateToCallApproverSignatureAndExpiryStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get approverSalt(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DelegateToCall__Outputs {
  _call: DelegateToCall;

  constructor(call: DelegateToCall) {
    this._call = call;
  }
}

export class DelegateToCallApproverSignatureAndExpiryStruct extends ethereum.Tuple {
  get signature(): Bytes {
    return this[0].toBytes();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }
}

export class DelegateToBySignatureCall extends ethereum.Call {
  get inputs(): DelegateToBySignatureCall__Inputs {
    return new DelegateToBySignatureCall__Inputs(this);
  }

  get outputs(): DelegateToBySignatureCall__Outputs {
    return new DelegateToBySignatureCall__Outputs(this);
  }
}

export class DelegateToBySignatureCall__Inputs {
  _call: DelegateToBySignatureCall;

  constructor(call: DelegateToBySignatureCall) {
    this._call = call;
  }

  get staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get stakerSignatureAndExpiry(): DelegateToBySignatureCallStakerSignatureAndExpiryStruct {
    return changetype<DelegateToBySignatureCallStakerSignatureAndExpiryStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }

  get approverSignatureAndExpiry(): DelegateToBySignatureCallApproverSignatureAndExpiryStruct {
    return changetype<DelegateToBySignatureCallApproverSignatureAndExpiryStruct>(
      this._call.inputValues[3].value.toTuple(),
    );
  }

  get approverSalt(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DelegateToBySignatureCall__Outputs {
  _call: DelegateToBySignatureCall;

  constructor(call: DelegateToBySignatureCall) {
    this._call = call;
  }
}

export class DelegateToBySignatureCallStakerSignatureAndExpiryStruct extends ethereum.Tuple {
  get signature(): Bytes {
    return this[0].toBytes();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }
}

export class DelegateToBySignatureCallApproverSignatureAndExpiryStruct extends ethereum.Tuple {
  get signature(): Bytes {
    return this[0].toBytes();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }
}

export class IncreaseDelegatedSharesCall extends ethereum.Call {
  get inputs(): IncreaseDelegatedSharesCall__Inputs {
    return new IncreaseDelegatedSharesCall__Inputs(this);
  }

  get outputs(): IncreaseDelegatedSharesCall__Outputs {
    return new IncreaseDelegatedSharesCall__Outputs(this);
  }
}

export class IncreaseDelegatedSharesCall__Inputs {
  _call: IncreaseDelegatedSharesCall;

  constructor(call: IncreaseDelegatedSharesCall) {
    this._call = call;
  }

  get staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get strategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get shares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class IncreaseDelegatedSharesCall__Outputs {
  _call: IncreaseDelegatedSharesCall;

  constructor(call: IncreaseDelegatedSharesCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pauserRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get initialPausedStatus(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minWithdrawalDelayBlocks(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _strategies(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get _withdrawalDelayBlocks(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MigrateQueuedWithdrawalsCall extends ethereum.Call {
  get inputs(): MigrateQueuedWithdrawalsCall__Inputs {
    return new MigrateQueuedWithdrawalsCall__Inputs(this);
  }

  get outputs(): MigrateQueuedWithdrawalsCall__Outputs {
    return new MigrateQueuedWithdrawalsCall__Outputs(this);
  }
}

export class MigrateQueuedWithdrawalsCall__Inputs {
  _call: MigrateQueuedWithdrawalsCall;

  constructor(call: MigrateQueuedWithdrawalsCall) {
    this._call = call;
  }

  get withdrawalsToMigrate(): Array<MigrateQueuedWithdrawalsCallWithdrawalsToMigrateStruct> {
    return this._call.inputValues[0].value.toTupleArray<MigrateQueuedWithdrawalsCallWithdrawalsToMigrateStruct>();
  }
}

export class MigrateQueuedWithdrawalsCall__Outputs {
  _call: MigrateQueuedWithdrawalsCall;

  constructor(call: MigrateQueuedWithdrawalsCall) {
    this._call = call;
  }
}

export class MigrateQueuedWithdrawalsCallWithdrawalsToMigrateStruct extends ethereum.Tuple {
  get strategies(): Array<Address> {
    return this[0].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get staker(): Address {
    return this[2].toAddress();
  }

  get withdrawerAndNonce(): MigrateQueuedWithdrawalsCallWithdrawalsToMigrateWithdrawerAndNonceStruct {
    return changetype<MigrateQueuedWithdrawalsCallWithdrawalsToMigrateWithdrawerAndNonceStruct>(
      this[3].toTuple(),
    );
  }

  get withdrawalStartBlock(): BigInt {
    return this[4].toBigInt();
  }

  get delegatedAddress(): Address {
    return this[5].toAddress();
  }
}

export class MigrateQueuedWithdrawalsCallWithdrawalsToMigrateWithdrawerAndNonceStruct extends ethereum.Tuple {
  get withdrawer(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }
}

export class ModifyOperatorDetailsCall extends ethereum.Call {
  get inputs(): ModifyOperatorDetailsCall__Inputs {
    return new ModifyOperatorDetailsCall__Inputs(this);
  }

  get outputs(): ModifyOperatorDetailsCall__Outputs {
    return new ModifyOperatorDetailsCall__Outputs(this);
  }
}

export class ModifyOperatorDetailsCall__Inputs {
  _call: ModifyOperatorDetailsCall;

  constructor(call: ModifyOperatorDetailsCall) {
    this._call = call;
  }

  get newOperatorDetails(): ModifyOperatorDetailsCallNewOperatorDetailsStruct {
    return changetype<ModifyOperatorDetailsCallNewOperatorDetailsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class ModifyOperatorDetailsCall__Outputs {
  _call: ModifyOperatorDetailsCall;

  constructor(call: ModifyOperatorDetailsCall) {
    this._call = call;
  }
}

export class ModifyOperatorDetailsCallNewOperatorDetailsStruct extends ethereum.Tuple {
  get earningsReceiver(): Address {
    return this[0].toAddress();
  }

  get delegationApprover(): Address {
    return this[1].toAddress();
  }

  get stakerOptOutWindowBlocks(): BigInt {
    return this[2].toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }

  get newPausedStatus(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseAllCall extends ethereum.Call {
  get inputs(): PauseAllCall__Inputs {
    return new PauseAllCall__Inputs(this);
  }

  get outputs(): PauseAllCall__Outputs {
    return new PauseAllCall__Outputs(this);
  }
}

export class PauseAllCall__Inputs {
  _call: PauseAllCall;

  constructor(call: PauseAllCall) {
    this._call = call;
  }
}

export class PauseAllCall__Outputs {
  _call: PauseAllCall;

  constructor(call: PauseAllCall) {
    this._call = call;
  }
}

export class QueueWithdrawalsCall extends ethereum.Call {
  get inputs(): QueueWithdrawalsCall__Inputs {
    return new QueueWithdrawalsCall__Inputs(this);
  }

  get outputs(): QueueWithdrawalsCall__Outputs {
    return new QueueWithdrawalsCall__Outputs(this);
  }
}

export class QueueWithdrawalsCall__Inputs {
  _call: QueueWithdrawalsCall;

  constructor(call: QueueWithdrawalsCall) {
    this._call = call;
  }

  get queuedWithdrawalParams(): Array<QueueWithdrawalsCallQueuedWithdrawalParamsStruct> {
    return this._call.inputValues[0].value.toTupleArray<QueueWithdrawalsCallQueuedWithdrawalParamsStruct>();
  }
}

export class QueueWithdrawalsCall__Outputs {
  _call: QueueWithdrawalsCall;

  constructor(call: QueueWithdrawalsCall) {
    this._call = call;
  }

  get value0(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class QueueWithdrawalsCallQueuedWithdrawalParamsStruct extends ethereum.Tuple {
  get strategies(): Array<Address> {
    return this[0].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get withdrawer(): Address {
    return this[2].toAddress();
  }
}

export class RegisterAsOperatorCall extends ethereum.Call {
  get inputs(): RegisterAsOperatorCall__Inputs {
    return new RegisterAsOperatorCall__Inputs(this);
  }

  get outputs(): RegisterAsOperatorCall__Outputs {
    return new RegisterAsOperatorCall__Outputs(this);
  }
}

export class RegisterAsOperatorCall__Inputs {
  _call: RegisterAsOperatorCall;

  constructor(call: RegisterAsOperatorCall) {
    this._call = call;
  }

  get registeringOperatorDetails(): RegisterAsOperatorCallRegisteringOperatorDetailsStruct {
    return changetype<RegisterAsOperatorCallRegisteringOperatorDetailsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get metadataURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RegisterAsOperatorCall__Outputs {
  _call: RegisterAsOperatorCall;

  constructor(call: RegisterAsOperatorCall) {
    this._call = call;
  }
}

export class RegisterAsOperatorCallRegisteringOperatorDetailsStruct extends ethereum.Tuple {
  get earningsReceiver(): Address {
    return this[0].toAddress();
  }

  get delegationApprover(): Address {
    return this[1].toAddress();
  }

  get stakerOptOutWindowBlocks(): BigInt {
    return this[2].toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMinWithdrawalDelayBlocksCall extends ethereum.Call {
  get inputs(): SetMinWithdrawalDelayBlocksCall__Inputs {
    return new SetMinWithdrawalDelayBlocksCall__Inputs(this);
  }

  get outputs(): SetMinWithdrawalDelayBlocksCall__Outputs {
    return new SetMinWithdrawalDelayBlocksCall__Outputs(this);
  }
}

export class SetMinWithdrawalDelayBlocksCall__Inputs {
  _call: SetMinWithdrawalDelayBlocksCall;

  constructor(call: SetMinWithdrawalDelayBlocksCall) {
    this._call = call;
  }

  get newMinWithdrawalDelayBlocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinWithdrawalDelayBlocksCall__Outputs {
  _call: SetMinWithdrawalDelayBlocksCall;

  constructor(call: SetMinWithdrawalDelayBlocksCall) {
    this._call = call;
  }
}

export class SetPauserRegistryCall extends ethereum.Call {
  get inputs(): SetPauserRegistryCall__Inputs {
    return new SetPauserRegistryCall__Inputs(this);
  }

  get outputs(): SetPauserRegistryCall__Outputs {
    return new SetPauserRegistryCall__Outputs(this);
  }
}

export class SetPauserRegistryCall__Inputs {
  _call: SetPauserRegistryCall;

  constructor(call: SetPauserRegistryCall) {
    this._call = call;
  }

  get newPauserRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPauserRegistryCall__Outputs {
  _call: SetPauserRegistryCall;

  constructor(call: SetPauserRegistryCall) {
    this._call = call;
  }
}

export class SetStrategyWithdrawalDelayBlocksCall extends ethereum.Call {
  get inputs(): SetStrategyWithdrawalDelayBlocksCall__Inputs {
    return new SetStrategyWithdrawalDelayBlocksCall__Inputs(this);
  }

  get outputs(): SetStrategyWithdrawalDelayBlocksCall__Outputs {
    return new SetStrategyWithdrawalDelayBlocksCall__Outputs(this);
  }
}

export class SetStrategyWithdrawalDelayBlocksCall__Inputs {
  _call: SetStrategyWithdrawalDelayBlocksCall;

  constructor(call: SetStrategyWithdrawalDelayBlocksCall) {
    this._call = call;
  }

  get strategies(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get withdrawalDelayBlocks(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetStrategyWithdrawalDelayBlocksCall__Outputs {
  _call: SetStrategyWithdrawalDelayBlocksCall;

  constructor(call: SetStrategyWithdrawalDelayBlocksCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UndelegateCall extends ethereum.Call {
  get inputs(): UndelegateCall__Inputs {
    return new UndelegateCall__Inputs(this);
  }

  get outputs(): UndelegateCall__Outputs {
    return new UndelegateCall__Outputs(this);
  }
}

export class UndelegateCall__Inputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }

  get staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UndelegateCall__Outputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }

  get withdrawalRoots(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }

  get newPausedStatus(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateOperatorMetadataURICall extends ethereum.Call {
  get inputs(): UpdateOperatorMetadataURICall__Inputs {
    return new UpdateOperatorMetadataURICall__Inputs(this);
  }

  get outputs(): UpdateOperatorMetadataURICall__Outputs {
    return new UpdateOperatorMetadataURICall__Outputs(this);
  }
}

export class UpdateOperatorMetadataURICall__Inputs {
  _call: UpdateOperatorMetadataURICall;

  constructor(call: UpdateOperatorMetadataURICall) {
    this._call = call;
  }

  get metadataURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateOperatorMetadataURICall__Outputs {
  _call: UpdateOperatorMetadataURICall;

  constructor(call: UpdateOperatorMetadataURICall) {
    this._call = call;
  }
}
